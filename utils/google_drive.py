import os
import pickle
import time
import pandas as pd
from openpyxl import Workbook
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from typing import List, Dict, Optional
import logging # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç logging

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø (–¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞) ---
# –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –ª–æ–≥–≥–µ—Ä, —á—Ç–æ –∏ –≤ api_fastapi_backend.py,
# –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å.
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


def get_credentials():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google API.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.
    """
    creds = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    if os.path.exists("token.pickle"):
        with open("token.pickle", "rb") as token:
            creds = pickle.load(token)

    # –ï—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º/–ø–æ–ª—É—á–∞–µ–º –∏—Ö
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request()) # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            flow = InstalledAppFlow.from_client_secrets_file(
                "client_secret.json",
                ["https://www.googleapis.com/auth/drive", "https://www.googleapis.com/auth/spreadsheets"]
            )
            creds = flow.run_local_server(port=0)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            with open("token.pickle", "wb") as token:
                pickle.dump(creds, token)

    return creds

def upload_table_to_sheets(table_data: List[Dict], original_order: Optional[List[str]] = None, project: str = "Unknown", geo: str = "Unknown", env: str = "prod"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é Google Sheet.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ original_order, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.

    Args:
        table_data (list[dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
        original_order (list[str], optional): –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
                                              –≤ –∂–µ–ª–∞–µ–º–æ–º –ø–æ—Ä—è–¥–∫–µ. –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω,
                                              –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —ç—Ç–æ–º—É –ø–æ—Ä—è–¥–∫—É.
        project (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∏–º—è —Ñ–∞–π–ª–∞.
        geo (str): GEO –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∏–º—è —Ñ–∞–π–ª–∞.
        env (str): –û–∫—Ä—É–∂–µ–Ω–∏–µ (prod/stage) –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∏–º—è —Ñ–∞–π–ª–∞.
    Returns:
        str: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π Google Sheet.
    """
    import tempfile

    # ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ original_order, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if original_order:
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ Paymethod -> row_data –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        title_to_row = {row.get("Paymethod"): row for row in table_data}
        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º table_data –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å original_order
        # –ò—Å–∫–ª—é—á–∞–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ title_to_row (—Ç.–µ. –Ω–µ –±—ã–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        table_data = [title_to_row[title] for title in original_order if title in title_to_row]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ DataFrame
    df = pd.DataFrame(table_data)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª Excel
    temp_xlsx = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º DataFrame –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª Excel
    with pd.ExcelWriter(temp_xlsx.name, engine="openpyxl") as writer:
        df.to_excel(writer, sheet_name="merged", index=False) # sheet_name "merged" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    creds = get_credentials()
    drive_service = build("drive", "v3", credentials=creds)

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ Google Sheet
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º –≤ –∫–æ–Ω—Ü–µ
    file_name = f"Geo Methods Export {geo} {env} - {project}"
    file_metadata = {
        "name": file_name, # –ò–º—è —Ñ–∞–π–ª–∞ –≤ Google Drive —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
        "mimeType": "application/vnd.google-apps.spreadsheet" # –¢–∏–ø —Ñ–∞–π–ª–∞: Google Sheet
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª –∫–∞–∫ Google Sheet
    media = MediaFileUpload(temp_xlsx.name, mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    uploaded_file = drive_service.files().create(
        body=file_metadata,
        media_body=media,
        fields="id" # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    ).execute()

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.unlink(temp_xlsx.name)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –∑–∞–º–æ—Ä–æ–∑–∫—É
    finalize_google_sheet_formatting(uploaded_file.get("id"))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    set_sheet_permissions(uploaded_file.get("id"))

    return uploaded_file.get("id")

def set_sheet_permissions(file_id):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Sheets —Ñ–∞–π–ª–∞.
    –î–∞–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã "Ramtinar Techconsult Limited".
    """
    try:
        creds = get_credentials()
        drive_service = build("drive", "v3", credentials=creds)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
        permission_body = {
            'type': 'domain',
            'role': 'writer',
            'domain': 'gbl-factory.com'  # –î–æ–º–µ–Ω –≥—Ä—É–ø–ø—ã
        }
        
        drive_service.permissions().create(
            fileId=file_id,
            body=permission_body,
            fields='id'
        ).execute()
        
        logging.info(f"‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ñ–∞–π–ª–∞ {file_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ñ–∞–π–ª–∞ {file_id}: {e}")

def create_google_file(output_filename):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª Excel –≤ Google Drive –∫–∞–∫ Google Sheet.
    """
    creds = get_credentials()
    drive_service = build("drive", "v3", credentials=creds)

    file_path = output_filename
    file_name = os.path.basename(output_filename)
    # ID –ø–∞–ø–∫–∏ –Ω–∞ Google Drive, –∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª
    folder_id = "1zsYxeJvCuVH8-07O-a48Ys50NwNiqY3e"

    file_metadata = {
        "name": file_name,
        "mimeType": "application/vnd.google-apps.spreadsheet",
        "parents": [folder_id], # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    media = MediaFileUpload(file_path, mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    uploaded_file = drive_service.files().create(body=file_metadata, media_body=media, fields="id").execute()
    file_id = uploaded_file.get("id")

    print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file_id}, –º—É–ª—å—Ç–∏–ª–∏—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é 'merged'")
    return file_id

def finalize_google_sheet_formatting(file_id: str, delete_columns_by_header: Optional[List[str]] = None):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –∑–∞–º–æ—Ä–æ–∑–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞, –∞–≤—Ç–æ—Å—Ç–∏–ª–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏ "Recommended"
    –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π Google Sheet.
    """
    creds = get_credentials()
    sheets_service = build("sheets", "v4", credentials=creds)

    # –î–∞–µ–º Google Sheets API –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    time.sleep(1.5)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ, –≤–∫–ª—é—á–∞—è –∏—Ö –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    spreadsheet_metadata = sheets_service.spreadsheets().get(
        spreadsheetId=file_id,
        fields='sheets.properties' # –ù—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è sheetId –∏ title
    ).execute()
    sheets_props = spreadsheet_metadata.get("sheets", [])

    all_requests = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    for sheet_prop in sheets_props:
        sheet_id = sheet_prop["properties"]["sheetId"]
        sheet_title = sheet_prop["properties"]["title"]

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
        try:
            header_response = sheets_service.spreadsheets().values().get(
                spreadsheetId=file_id,
                range=f"'{sheet_title}'!1:1"
            ).execute()
            current_headers = header_response.get("values", [[]])[0]
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ '{sheet_title}': {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")
            continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ª–∏—Å—Ç—É, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã

        if not current_headers:
            logging.info(f"–õ–∏—Å—Ç '{sheet_title}' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
            continue

        # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        # –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –æ–∂–∏–¥–∞–µ–º–æ–º –ø–æ—Ä—è–¥–∫–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        column_widths_config = [
            (0, 25 * 6),   # –ö–æ–ª–æ–Ω–∫–∞ A (Paymethod)
            (1, 60 * 6),       # –ö–æ–ª–æ–Ω–∫–∞ B (Recommended) - –£–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 70px
            (2, 50 * 6),   # –ö–æ–ª–æ–Ω–∫–∞ C (Payment Name) - –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π —à–∏—Ä–∏–Ω–µ
            (3, 18 * 6),   # –ö–æ–ª–æ–Ω–∫–∞ D (Currency)
            (4, 18 * 6),   # –ö–æ–ª–æ–Ω–∫–∞ E (Deposit)
            (5, 18 * 6),   # –ö–æ–ª–æ–Ω–∫–∞ F (Withdraw)
            (6, 25 * 6)    # –ö–æ–ª–æ–Ω–∫–∞ G (Status)
            # RecommendedSort –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ –∏ –∑–∞—Ç–µ–º —É–¥–∞–ª–µ–Ω
        ]
        for idx, size in column_widths_config:
            if idx < len(current_headers): # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                all_requests.append({
                    "updateDimensionProperties": {
                        "range": {
                            "sheetId": sheet_id,
                            "dimension": "COLUMNS",
                            "startIndex": idx,
                            "endIndex": idx + 1
                        },
                        "properties": {"pixelSize": size},
                        "fields": "pixelSize"
                    }
                })

        # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é —è—á–µ–µ–∫
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ endColumnIndex –≤—Å–µ–≥–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (>= startColumnIndex)
        end_col_for_styles = len(current_headers) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫

        style_requests = [
            # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            {
                "repeatCell": {
                    "range": {"sheetId": sheet_id, "startRowIndex": 0, "endRowIndex": 1},
                    "cell": {"userEnteredFormat": {"textFormat": {"bold": True}}},
                    "fields": "userEnteredFormat.textFormat.bold"
                }
            },
            # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–Ω–∞–∑–≤–∞–Ω–∏–π Paymethod)
            {
                "repeatCell": {
                    "range": {"sheetId": sheet_id, "startColumnIndex": 0, "endColumnIndex": 1},
                    "cell": {"userEnteredFormat": {"textFormat": {"bold": True}}},
                    "fields": "userEnteredFormat.textFormat.bold"
                }
            },
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏, —Å 3-–≥–æ —Å—Ç–æ–ª–±—Ü–∞)
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ endColumnIndex >= startColumnIndex + 1
            {
                "repeatCell": {
                    "range": {
                        "sheetId": sheet_id,
                        "startRowIndex": 1, # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 1)
                        "startColumnIndex": 2, # –ù–∞—á–∏–Ω–∞–µ–º —Å 3-–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–∏–Ω–¥–µ–∫—Å 2)
                        "endColumnIndex": max(2 + 1, end_col_for_styles) # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–Ω–µ—Ü –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3
                    },
                    "cell": {
                        "userEnteredFormat": {
                            "horizontalAlignment": "CENTER",
                            "verticalAlignment": "MIDDLE"
                        }
                    },
                    "fields": "userEnteredFormat.horizontalAlignment, userEnteredFormat.verticalAlignment"
                }
            },
            # –¢–æ–ª—Å—Ç–∞—è –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            {
                "updateBorders": {
                    "range": {
                        "sheetId": sheet_id,
                        "startRowIndex": 0,
                        "endRowIndex": 1,
                        "endColumnIndex": end_col_for_styles # –î–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–∏
                    },
                    "bottom": {"style": "SOLID_THICK", "color": {"red": 0.2, "green": 0.2, "blue": 0.8}}
                }
            },
            # –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è "PROD" (–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω)
            {
                "addConditionalFormatRule": {
                    "rule": {
                        "ranges": [{
                            "sheetId": sheet_id,
                            "startRowIndex": 1, # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏
                            "startColumnIndex": current_headers.index("Status") if "Status" in current_headers else 0, # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–∞ "Status"
                            "endColumnIndex": (current_headers.index("Status") + 1) if "Status" in current_headers else 1
                        }],
                        "booleanRule": {
                            "condition": {"type": "TEXT_EQ", "values": [{"userEnteredValue": "PROD"}]},
                            "format": {"backgroundColor": {"red": 0.85, "green": 0.95, "blue": 0.85}}
                        }
                    },
                    "index": 0 # –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª–∞
                }
            },
            # –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è "STAGE" (–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω)
            {
                "addConditionalFormatRule": {
                    "rule": {
                        "ranges": [{
                            "sheetId": sheet_id,
                            "startRowIndex": 1,
                            "startColumnIndex": current_headers.index("Status") if "Status" in current_headers else 0,
                            "endColumnIndex": (current_headers.index("Status") + 1) if "Status" in current_headers else 1
                        }],
                        "booleanRule": {
                            "condition": {"type": "TEXT_EQ", "values": [{"userEnteredValue": "STAGE"}]},
                            "format": {"backgroundColor": {"red": 0.95, "green": 0.95, "blue": 0.75}}
                        }
                    },
                    "index": 1
                }
            },
            # –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è "YES" (–∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç)
            {
                "addConditionalFormatRule": {
                    "rule": {
                        "ranges": [{
                            "sheetId": sheet_id,
                            "startRowIndex": 1,
                            "startColumnIndex": 2, # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç–æ–ª–±—Ü–∞ "Payment Name"
                            "endColumnIndex": end_col_for_styles # –î–æ –∫–æ–Ω—Ü–∞ –∫–æ–ª–æ–Ω–æ–∫
                        }],
                        "booleanRule": {
                            "condition": {"type": "TEXT_EQ", "values": [{"userEnteredValue": "YES"}]},
                            "format": {"textFormat": {"foregroundColor": {"red": 0.0, "green": 0.5, "blue": 0.0}}} # –ë–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                        }
                    },
                    "index": 2
                }
            },
            # –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è "NO" (–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç)
            {
                "addConditionalFormatRule": {
                    "rule": {
                        "ranges": [{
                            "sheetId": sheet_id,
                            "startRowIndex": 1,
                            "startColumnIndex": 2, # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç–æ–ª–±—Ü–∞ "Payment Name"
                            "endColumnIndex": end_col_for_styles # –î–æ –∫–æ–Ω—Ü–∞ –∫–æ–ª–æ–Ω–æ–∫
                        }],
                        "booleanRule": {
                            "condition": {"type": "TEXT_EQ", "values": [{"userEnteredValue": "NO"}]},
                            "format": {"textFormat": {"foregroundColor": {"red": 0.8, "green": 0.0, "blue": 0.0}}} # –ë–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                        }
                    },
                    "index": 3
                }
            }
        ]
        all_requests.extend(style_requests)

        # –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        all_requests.append({
            "updateSheetProperties": {
                "properties": {
                    "sheetId": sheet_id,
                    "gridProperties": {
                        "frozenRowCount": 1
                    }
                },
                "fields": "gridProperties.frozenRowCount"
            }
        })

        # --- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –°–Ω–∞—á–∞–ª–∞ –ø–æ RecommendedSort (DESC), –∑–∞—Ç–µ–º –ø–æ Deposit (DESC) ---
        sort_specs = []
        recommended_sort_index = -1
        deposit_index = -1

        try:
            recommended_sort_index = current_headers.index("RecommendedSort")
        except ValueError:
            logging.warning(f"–ö–æ–ª–æ–Ω–∫–∞ 'RecommendedSort' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ª–∏—Å—Ç–µ '{sheet_title}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ RecommendedSort –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")
        
        try:
            deposit_index = current_headers.index("Deposit")
        except ValueError:
            logging.warning(f"–ö–æ–ª–æ–Ω–∫–∞ 'Deposit' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ª–∏—Å—Ç–µ '{sheet_title}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ Deposit –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")

        if recommended_sort_index != -1:
            sort_specs.append({
                "dimensionIndex": recommended_sort_index,
                "sortOrder": "DESCENDING"
            })
        if deposit_index != -1:
            sort_specs.append({
                "dimensionIndex": deposit_index,
                "sortOrder": "DESCENDING"
            })
        
        if sort_specs:
            all_requests.append({
                "sortRange": {
                    "range": {
                        "sheetId": sheet_id,
                        "startRowIndex": 1,  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        "startColumnIndex": 0,
                        "endColumnIndex": len(current_headers) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–∏
                    },
                    "sortSpecs": sort_specs
                }
            })

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º
    try:
        sheets_service.spreadsheets().batchUpdate(
            spreadsheetId=file_id,
            body={"requests": all_requests}
        ).execute()
        logging.info(f"‚úÖ –°—Ç–∏–ª–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –∑–∞–º–æ—Ä–æ–∑–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ –≤—Å–µ–º {len(sheets_props)} –ª–∏—Å—Ç–∞–º.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}")
        raise # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–±–æ–π

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏) ---
    if delete_columns_by_header:
        delete_requests = []
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ª–∏—Å—Ç–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–æ–≥–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        time.sleep(1.5) # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        updated_spreadsheet_metadata = sheets_service.spreadsheets().get(
            spreadsheetId=file_id,
            fields='sheets.properties,sheets.data.rowData.values.formattedValue'
        ).execute()
        updated_sheets = updated_spreadsheet_metadata.get("sheets", [])

        for sheet in updated_sheets:
            sheet_id = sheet["properties"]["sheetId"]
            sheet_title = sheet["properties"]["title"]
            
            current_headers = []
            if sheet.get("data") and sheet["data"] and sheet["data"][0].get("rowData") and sheet["data"][0]["rowData"][0].get("values"):
                current_headers = [
                    cell.get("formattedValue", "")
                    for cell in sheet["data"][0]["rowData"][0]["values"]
                ]

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–º–µ—â–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤)
            indices_to_delete = sorted([
                idx for idx, header_value in enumerate(current_headers)
                if header_value in delete_columns_by_header
            ], reverse=True) # –£–¥–∞–ª—è–µ–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ

            for idx in indices_to_delete:
                delete_requests.append({
                    "deleteDimension": {
                        "range": {
                            "sheetId": sheet_id,
                            "dimension": "COLUMNS",
                            "startIndex": idx,
                            "endIndex": idx + 1
                        }
                    }
                })
        
        if delete_requests:
            try:
                sheets_service.spreadsheets().batchUpdate(
                    spreadsheetId=file_id,
                    body={"requests": delete_requests}
                ).execute()
                logging.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∏ {delete_columns_by_header} —É–¥–∞–ª–µ–Ω—ã —Å–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤.")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ {delete_columns_by_header}: {e}")
    
    # ‚è± –ü–æ–¥–æ–∂–¥–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å —Å—Ä–∞–∑—É)
    time.sleep(1.5) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç—É –∑–∞–¥–µ—Ä–∂–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π Google Sheets API

    # üîö –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –ª–∏—Å—Ç–æ–≤ (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫)
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —è—á–µ–µ–∫, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        spreadsheet_content = sheets_service.spreadsheets().get(spreadsheetId=file_id, includeGridData=True).execute()
        for sheet_item in spreadsheet_content.get("sheets", []):
            sheet_id = sheet_item["properties"]["sheetId"]
            sheet_title = sheet_item["properties"]["title"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
            # sheet_item.get("data") –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –ª–∏—Å—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—É—Å—Ç
            # rowData[0] - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            row_data = sheet_item.get("data", [{}])[0].get("rowData", [])
            
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –≤–æ–æ–±—â–µ –ø—É—Å—Ç–æ (0 –∏–ª–∏ 1 —Å—Ç—Ä–æ–∫–∞)
            if len(row_data) <= 1:
                logging.info(f"üóë –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç: {sheet_title} (ID: {sheet_id})")
                sheets_service.spreadsheets().batchUpdate(
                    spreadsheetId=file_id,
                    body={
                        "requests": [{"deleteSheet": {"sheetId": sheet_id}}]
                    }
                ).execute()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ –ª–∏—Å—Ç—ã: {e}")

    logging.info(f"‚úÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è {file_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ apply_styles_to_sheet –∏ apply_sorting_and_freeze —É–¥–∞–ª–µ–Ω—ã,
# —Ç–∞–∫ –∫–∞–∫ –∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω–∞ –≤ finalize_google_sheet_formatting.
