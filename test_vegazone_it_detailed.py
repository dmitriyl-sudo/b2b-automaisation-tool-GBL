#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 0depnoaffiteurmobi
–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ñ—Ä–æ–Ω—Ç–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from extractors.vegazone_extractor import VegazoneExtractor
from main import password_data
import logging
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def decode_alias(alias):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç base64 alias"""
    try:
        return base64.b64decode(alias).decode('utf-8')
    except:
        return alias

def test_vegazone_it_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ IT –¥–∞–Ω–Ω—ã—Ö"""
    print('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –î–õ–Ø 0depnoaffiteurmobi')
    print('='*70)
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ñ—Ä–æ–Ω—Ç–∞ (–ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤)
    expected_methods = [
        {
            "name": "V/M_Directcorefy_Cards_0DEP//mob//noaff",
            "title": "Visa/Mastercard", 
            "alias": "dm0tZGlyZWN0Y29yZWZ5LWNhcmRzLTBkZXBtb2Jub2FmZg==",
            "display_type": "out"
        },
        {
            "name": "Nodapay_nodapay_Banks_IT",
            "title": "Pay via Bank",
            "alias": "bm9kYXBheS1ub2RhcGF5LWJhbmtzLWl0",
            "display_type": "out"
        }
    ]
    
    print("üìã –û–ñ–ò–î–ê–ï–ú–´–ï –ú–ï–¢–û–î–´ –° –§–†–û–ù–¢–ê:")
    for i, method in enumerate(expected_methods, 1):
        decoded_alias = decode_alias(method['alias'])
        print(f"   {i}. {method['title']} ‚Üí {method['name']}")
        print(f"      alias: {method['alias']} ‚Üí {decoded_alias}")
        print(f"      display_type: {method['display_type']}")
        print()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    print("üîß –°–û–ó–î–ê–ï–ú –≠–ö–°–¢–†–ê–ö–¢–û–†...")
    extractor = VegazoneExtractor(
        login="0depnoaffiteurmobi",
        password=password_data,
        base_url="https://vegazone.com"
    )
    
    print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø...")
    auth_success = extractor.authenticate()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if auth_success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    print(f"üì± User-Agent: {extractor.headers.get('User-Agent', 'N/A')}")
    print(f"üí∞ –í–∞–ª—é—Ç–∞: {extractor.currency}")
    
    print("\nüîç –ü–û–õ–£–ß–ê–ï–ú –ú–ï–¢–û–î–´...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥—ã —Å raw –¥–∞–Ω–Ω—ã–º–∏
        (deposit_enriched, wd_titles, dep_names, wd_names, 
         currency, deposit_count, recommended_methods) = extractor.get_payment_and_withdraw_systems("IT")
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ö–°–¢–†–ê–ö–¢–û–†–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤: {len(deposit_enriched)}")
        print(f"   ‚Ä¢ –í–∞–ª—é—Ç–∞: {currency}")
        
        print(f"\nüìã –ú–ï–¢–û–î–´ –ò–ó –≠–ö–°–¢–†–ê–ö–¢–û–†–ê:")
        found_methods = {}
        for i, method in enumerate(deposit_enriched, 1):
            title = method['title']
            name = method['name']
            min_dep = method.get('min_deposit', 'N/A')
            cur = method.get('currency', 'N/A')
            
            print(f"   {i:2d}. {title} ‚Üí {name} | {min_dep} {cur}")
            found_methods[name] = title
        
        print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –° –û–ñ–ò–î–ê–ï–ú–´–ú–ò:")
        for expected in expected_methods:
            expected_name = expected['name']
            expected_title = expected['title']
            
            if expected_name in found_methods:
                print(f"   ‚úÖ {expected_title} ({expected_name}) - –ù–ê–ô–î–ï–ù")
            else:
                print(f"   ‚ùå {expected_title} ({expected_name}) - –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
                
                # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –º–µ—Ç–æ–¥—ã
                similar = []
                for found_name, found_title in found_methods.items():
                    if expected_title.lower() in found_title.lower() or found_title.lower() in expected_title.lower():
                        similar.append((found_title, found_name))
                
                if similar:
                    print(f"      üîç –ü–æ—Ö–æ–∂–∏–µ –º–µ—Ç–æ–¥—ã:")
                    for sim_title, sim_name in similar:
                        print(f"         ‚Ä¢ {sim_title} ({sim_name})")
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–û–¢–ï–†–Ø–ù–ù–û–ì–û –ú–ï–¢–û–î–ê:")
        target_method = "V/M_Directcorefy_Cards_0DEP//mob//noaff"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥—ã —Å Directcorefy
        directcorefy_methods = []
        for name, title in found_methods.items():
            if 'directcorefy' in name.lower() or 'corefy' in name.lower():
                directcorefy_methods.append((title, name))
        
        if directcorefy_methods:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–æ–¥—ã —Å Directcorefy/Corefy:")
            for title, name in directcorefy_methods:
                print(f"      ‚Ä¢ {title} ({name})")
        else:
            print(f"   ‚ùå –ù–ï–¢ –º–µ—Ç–æ–¥–æ–≤ —Å Directcorefy/Corefy!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥—ã —Å mob//noaff
        mobile_noaff_methods = []
        for name, title in found_methods.items():
            if 'mob' in name.lower() and 'noaff' in name.lower():
                mobile_noaff_methods.append((title, name))
        
        if mobile_noaff_methods:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–æ–¥—ã —Å mob//noaff:")
            for title, name in mobile_noaff_methods:
                print(f"      ‚Ä¢ {title} ({name})")
        else:
            print(f"   ‚ùå –ù–ï–¢ –º–µ—Ç–æ–¥–æ–≤ —Å mob//noaff!")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    
    print(f"\n" + "="*70)
    print("üéØ –í–´–í–û–î–´:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ V/M_Directcorefy_Cards_0DEP//mob//noaff –≤ –ª–æ–≥–∞—Ö")
    print("2. –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ display_type –∏–ª–∏ operation_type")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç –ø–æ–ª–µ 'name'")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_vegazone_it_detailed()
    return True

if __name__ == "__main__":
    main()
