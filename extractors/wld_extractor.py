# extractors/wld_extractor.py
from typing import List, Tuple, Set, Dict, Any, Optional
import logging

from .base_extractor import BaseExtractor
from .min_deposit_extractor import compute_min_deposit


class WildTokyoExtractor(BaseExtractor):
    """
    –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–ª—è WildTokyo:
    - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ BaseExtractor (currency/deposit_count –ø–æ–¥—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ª–æ–≥–∏–Ω–∞);
    - –¥–µ–ø–æ–∑–∏—Ç—ã –±–µ—Ä—ë–º —Å return_raw=True –∏ —Å—á–∏—Ç–∞–µ–º min_deposit –Ω–∞ –∫–∞–∂–¥—É—é –ø–∞—Ä—É (title, name);
    - recommended –±–µ—Ä—ë–º –¢–û–õ–¨–ö–û –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–∞;
    - –±–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏ –±–µ–∑ /en; –ø—Ä–∏ 404/–≤–∞—Ä–∏–∞—Ü–∏—è—Ö BaseExtractor —Å–∞–º –ø–æ–¥–±–µ—Ä—ë—Ç —Ä–∞–±–æ—á–∏–π endpoint.
    - üéØ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–µ–º Binance Pay –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ API
    """

    DEPOSIT_URL: str  = "/api/v1/model/paysystem/deposit"
    WITHDRAW_URL: str = "/api/v1/model/paysystem/withdraw"

    def __init__(self, login, password, user_agent: Optional[str] = None, base_url: Optional[str] = None):
        super().__init__(base_url, login, password, user_agent)

    def _add_binance_pay_if_missing(self, methods: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç Binance Pay –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –º–µ—Ç–æ–¥–∞—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ Binance Pay
        has_binance = any(
            method.get("title", "").lower() == "binance pay" or 
            "binance" in method.get("name", "").lower()
            for method in methods
        )
        
        if not has_binance:
            logging.info("üéØ [WildTokyo] –î–æ–±–∞–≤–ª—è–µ–º Binance Pay - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ API")
            binance_method = {
                "title": "Binance Pay",
                "name": "Binancepay_Binancepay_Crypto",
                "min_deposit": 50.0,
                "currency": self.currency or "CHF",
                "min_source": "default_binance",
            }
            methods.append(binance_method)
            logging.info(f"‚úÖ [WildTokyo] Binance Pay –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {len(methods)}")
        else:
            logging.info("‚úÖ [WildTokyo] Binance Pay —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–µ—Ç–æ–¥–∞—Ö")
        
        return methods

    def get_payment_and_withdraw_systems(self, current_geo: str) -> Tuple[
        List[Dict[str, Any]],  # deposit_enriched: [{'title','name','min_deposit','currency','min_source'}, ...]
        List[str],             # withdraw titles
        List[str],             # deposit names (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        List[str],             # withdraw names
        Optional[str],         # currency
        int,                   # deposit_count
        Set[Tuple[str, str]]   # recommended {(title, name), ...}
    ]:
        country = (current_geo or "").split("_")[0]

        logging.info("[WildTokyo] Fetching DEPOSIT methods")
        dep_titles, dep_names, rec_dep, dep_raw = self.fetch_methods(
            self.DEPOSIT_URL, country, return_raw=True
        )

        logging.info("[WildTokyo] Fetching WITHDRAW methods")
        wd_titles, wd_names, _rec_wd, _ = self.fetch_methods(
            self.WITHDRAW_URL, country, return_raw=True
        )

        # –û–±–æ–≥–∞—â–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –º–∏–Ω–∏–º—É–º–æ–º
        deposit_enriched: List[Dict[str, Any]] = []
        for item in dep_raw or []:
            try:
                title = (item.get("title") or item.get("alias") or item.get("name") or "").strip()
                pm = item.get("paymethods") or {}
                pm_pay = pm.get("paymethod") or {}

                name = (
                    item.get("name")
                    or pm_pay.get("name")
                    or pm_pay.get("code")
                    or item.get("doc_id")
                    or ""
                ).strip()
                if not title or not name:
                    continue

                min_val, source = compute_min_deposit(item)
                cur = ((pm.get("currency") or {}).get("code")) or self.currency

                deposit_enriched.append({
                    "title": title,
                    "name": name,
                    "min_deposit": float(min_val) if min_val is not None else None,
                    "currency": cur,
                    "min_source": source,
                })
            except Exception:
                # –Ω–µ –≤–∞–ª–∏–º—Å—è –Ω–∞ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –∫—Ä–∏–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö
                continue

        # üéØ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–µ–º Binance Pay –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        deposit_enriched = self._add_binance_pay_if_missing(deposit_enriched)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–∞
        recommended_methods: Set[Tuple[str, str]] = set(rec_dep)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Binance Pay —Ç–æ—á–Ω–æ –µ—Å—Ç—å
        binance_count = sum(1 for method in deposit_enriched 
                          if method.get("title", "").lower() == "binance pay" or 
                             "binance" in method.get("name", "").lower())
        logging.info(f"[WildTokyo] Binance Pay –º–µ—Ç–æ–¥–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {binance_count}")

        return (
            deposit_enriched,
            wd_titles,
            dep_names,
            wd_names,
            self.currency,
            len(deposit_enriched),  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Å Binance Pay
            recommended_methods,
        )
