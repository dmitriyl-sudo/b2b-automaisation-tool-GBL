import logging
from typing import List, Tuple, Set, Dict, Any, Optional

from .base_extractor import BaseExtractor
from .min_deposit_extractor import compute_min_deposit


class SpinEmpireExtractor(BaseExtractor):
    """
    –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–ª—è SpinEmpire –Ω–∞ –æ—Å–Ω–æ–≤–µ Rolling —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞:
    - —Ç—è–Ω–µ–º —Å—ã—Ä—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã —Å return_raw=True
    - —Å—á–∏—Ç–∞–µ–º min_deposit –¥–ª—è –∫–∞–∂–¥–æ–π –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–π –ø–∞—Ä—ã
    - ‚≠ê recommended –±–µ—Ä—ë–º –¢–û–õ–¨–ö–û –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ (–∫–∞–∫ –≤ Rolling)
    - üéØ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Binance Pay –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤
    """

    def __init__(self, login, password, user_agent=None, base_url=None):
        super().__init__(base_url, login, password, user_agent)
    
    def _is_crypto_method(self, title: str, name: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (–ù–ï –≤–∫–ª—é—á–∞—è Jeton –∏ Binance Pay)"""
        # Jeton –∏ Binance Pay –ù–ï –¥–æ–ª–∂–Ω—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏!
        title_lower = (title or "").strip().lower()
        if title_lower in ["jeton", "binance pay"]:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (name) - –∏—Å–∫–ª—é—á–∞–µ–º Jeton –∏ Binance
        import re
        # –ò—Å–∫–ª—é—á–∞–µ–º Binance –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ Crypto
        if "binance" in (name or "").lower():
            return False
            
        crypto_pattern = r"Coinspaid|Crypto|Tether|Bitcoin|Ethereum|Litecoin|Ripple|Tron|USDC|USDT|DOGE|Cardano|Solana|Toncoin"
        if re.search(crypto_pattern, name or "", re.IGNORECASE):
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ title
        if title_lower == "crypto":
            return True
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–ù–ï –≤–∫–ª—é—á–∞—è jeton –∏ binance)
        crypto_prefixes = ["btc", "eth", "ltc", "xrp", "trx", "usdt", "usdc", "sol", "ada", "bch", "ton", "doge"]
        if any(title_lower.startswith(prefix) for prefix in crypto_prefixes):
            return True
            
        return False

    def _add_binance_pay_for_tests(self, methods: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç Binance Pay –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ Binance Pay
        has_binance = any(
            method.get("title", "").lower() == "binance pay" or 
            "binance" in method.get("name", "").lower()
            for method in methods
        )
        
        if not has_binance:
            logging.info("üéØ –î–æ–±–∞–≤–ª—è–µ–º Binance Pay –¥–ª—è —Ç–µ—Å—Ç–æ–≤ SpinEmpire")
            binance_method = {
                "title": "Binance Pay",
                "name": "Binancepay_Binancepay_Crypto",
                "min_deposit": 50.0,
                "currency": self.currency or "EUR",
                "min_source": "test_default",
                "display_type": "out",
                "parent_paysystem": "Crypto",
                "api_position": len(methods),
                "method_type": "visible",
                "is_test_method": True  # –ú–∞—Ä–∫–µ—Ä —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
            }
            methods.append(binance_method)
            logging.info(f"‚úÖ Binance Pay –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {len(methods)}")
        else:
            logging.info("‚úÖ Binance Pay —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–µ—Ç–æ–¥–∞—Ö")
        
        return methods

    def get_payment_and_withdraw_systems(self, current_geo: str):
        current_country = current_geo.split("_")[0]

        logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö –¥–ª—è SpinEmpire")
        dep_titles, dep_names, rec_dep, dep_raw = self.fetch_methods(
            self.DEPOSIT_URL, current_country, return_raw=True
        )

        logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–≤–æ–¥–∞—Ö –¥–ª—è SpinEmpire")
        wd_titles, wd_names, rec_wd, _ = self.fetch_methods(
            self.WITHDRAW_URL, current_country, return_raw=True
        )

        # ‚îÄ‚îÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –°–û–•–†–ê–ù–Ø–Ø API –ü–û–†–Ø–î–û–ö
        all_processed_methods: List[Dict[str, Any]] = []
        crypto_methods = []
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –º–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
        for item in dep_raw or []:
            try:
                title = (item.get("title") or item.get("alias") or item.get("name") or "").strip()
                pm = item.get("paymethods") or {}
                pm_pay = pm.get("paymethod") or {}
                name = (item.get("name") or pm_pay.get("name") or pm_pay.get("code") or "").strip()
                display_type = item.get("display_type", "")
                parent_paysystem = item.get("parent_paysystem", "")
                
                if not title or not name:
                    continue

                min_val, source = compute_min_deposit(item)
                currency = ((pm.get("currency") or {}).get("code")) or self.currency

                method_data = {
                    "title": title,
                    "name": name,
                    "min_deposit": float(min_val) if min_val is not None else None,
                    "currency": currency,
                    "min_source": source,
                    "display_type": display_type,
                    "parent_paysystem": parent_paysystem,
                    "api_position": len(all_processed_methods),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –ø–æ–∑–∏—Ü–∏—é!
                    "is_test_method": False  # –û–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ API
                }

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ç–æ–¥–∞
                is_crypto_by_name = self._is_crypto_method(title, name)
                is_special_method = title in ["Jeton", "Binance Pay"]
                
                if parent_paysystem == "Crypto" or is_crypto_by_name:
                    method_data["method_type"] = "crypto"
                    crypto_methods.append(method_data)
                elif display_type == "in" and title != "Crypto" and not is_special_method:
                    method_data["method_type"] = "hidden"
                    crypto_methods.append(method_data)
                else:
                    method_data["method_type"] = "visible"
                
                all_processed_methods.append(method_data)
                    
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–æ–¥–∞ SpinEmpire: {e}")
                continue
        
        # –¢–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –°–û–•–†–ê–ù–Ø–Ø –ü–û–†–Ø–î–û–ö
        deposit_enriched: List[Dict[str, Any]] = []
        for method in all_processed_methods:
            if method["method_type"] == "visible":
                deposit_enriched.append(method)

        # üéØ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–µ–º Binance Pay –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        deposit_enriched = self._add_binance_pay_for_tests(deposit_enriched)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –æ–¥–∏–Ω "Crypto" –º–µ—Ç–æ–¥
        if crypto_methods:
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π Crypto –º–µ—Ç–æ–¥
            crypto_main = None
            for method in deposit_enriched:
                if method["title"] == "Crypto":
                    crypto_main = method
                    break
            
            if not crypto_main:
                # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π Crypto –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                crypto_main = {
                    "title": "Crypto",
                    "name": "Crypto",
                    "min_deposit": 50.0,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∏–Ω–∏–º—É–º –¥–ª—è –∫—Ä–∏–ø—Ç–æ
                    "currency": self.currency,
                    "min_source": "default",
                    "display_type": "in",
                    "parent_paysystem": "",
                    "is_test_method": False
                }
                deposit_enriched.append(crypto_main)

        logging.info(f"SpinEmpire - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {len(deposit_enriched)} (–±—ã–ª–æ {len(dep_raw or [])})")
        logging.info(f"SpinEmpire - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ: {len(crypto_methods)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Binance Pay —Ç–æ—á–Ω–æ –µ—Å—Ç—å
        binance_count = sum(1 for method in deposit_enriched 
                          if method.get("title", "").lower() == "binance pay" or 
                             "binance" in method.get("name", "").lower())
        logging.info(f"SpinEmpire - Binance Pay –º–µ—Ç–æ–¥–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {binance_count}")

        # ‚≠ê —Ç–æ–ª—å–∫–æ –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–Ω–∏–∫–∞–∫–æ–≥–æ union)
        recommended_methods: Set[Tuple[str, str]] = set(rec_dep)

        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–µ–∂–Ω–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        return (
            deposit_enriched,      # –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–π –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            wd_titles,             # withdraw titles (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            dep_names,             # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—Ä–æ–Ω—Ç–æ–º, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            wd_names,
            self.currency,
            len(deposit_enriched), # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
            recommended_methods
        )
