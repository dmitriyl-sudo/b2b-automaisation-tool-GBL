#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Blik –∏–∑ —Ö–∞—Ä–¥–∫–æ–¥ –º–µ—Ç–æ–¥–æ–≤
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
PROJECT = "Rolling"
ENV = "prod"
TEST_GEOS = ["PL_PLN", "FI", "DE", "IT"]  # PL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Blik, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

def test_hardcode_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥ –º–µ—Ç–æ–¥—ã –≤ —Ä–∞–∑–Ω—ã—Ö GEO"""
    print("üîç –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥ –º–µ—Ç–æ–¥–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Blik")
    print("=" * 70)
    
    results = {}
    
    for geo in TEST_GEOS:
        try:
            response = requests.post(f"{BASE_URL}/get-methods-only", json={
                "project": PROJECT,
                "geo": geo,
                "env": ENV
            })
            
            if response.status_code != 200:
                results[geo] = {"error": f"HTTP {response.status_code}"}
                continue
                
            data = response.json()
            
            if not data.get('success'):
                results[geo] = {"error": data.get('error', 'Unknown')}
                continue
                
            methods = data.get('methods', [])
            
            # –ò—â–µ–º —Ö–∞—Ä–¥–∫–æ–¥ –º–µ—Ç–æ–¥—ã
            hardcode_methods = []
            blik_found = False
            zimpler_found = False
            applepay_found = False
            
            for method in methods:
                title = method.get('title', '')
                if title in ['Blik']:
                    blik_found = True
                    hardcode_methods.append(f"‚ùå {title} (–ù–ï –î–û–õ–ñ–ï–ù –ë–´–¢–¨)")
                elif title in ['Zimpler']:
                    zimpler_found = True
                    hardcode_methods.append(f"‚úÖ {title}")
                elif title in ['ApplePay Visa', 'ApplePay Gumballpay']:
                    applepay_found = True
                    hardcode_methods.append(f"‚úÖ {title}")
                    
            results[geo] = {
                "total_methods": len(methods),
                "hardcode_methods": hardcode_methods,
                "blik_found": blik_found,
                "zimpler_found": zimpler_found,
                "applepay_found": applepay_found,
                "accounts": f"{data.get('accounts_processed', 0)}/{data.get('total_accounts', 0)}",
                "is_empty": len(methods) == 0
            }
            
        except Exception as e:
            results[geo] = {"error": str(e)}
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for geo, result in results.items():
        if "error" in result:
            print(f"  {geo:8} ‚ùå {result['error']}")
        elif result.get("is_empty"):
            print(f"  {geo:8} ‚ö™ –ü—É—Å—Ç–æ–µ GEO (0 –º–µ—Ç–æ–¥–æ–≤)")
        else:
            total = result['total_methods']
            hardcode = result['hardcode_methods']
            accounts = result['accounts']
            
            print(f"  {geo:8} üìä {total} –º–µ—Ç–æ–¥–æ–≤, –∞–∫–∫–∞—É–Ω—Ç—ã {accounts}")
            
            if hardcode:
                print(f"           üîß –•–∞—Ä–¥–∫–æ–¥ –º–µ—Ç–æ–¥—ã:")
                for method in hardcode:
                    print(f"              {method}")
            else:
                print(f"           üîß –•–∞—Ä–¥–∫–æ–¥ –º–µ—Ç–æ–¥—ã: –Ω–µ—Ç")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üß™ –¢–ï–°–¢ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø BLIK –ò–ó –•–ê–†–î–ö–û–î –ú–ï–¢–û–î–û–í")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ –ü—Ä–æ–µ–∫—Ç: {PROJECT}")
    print(f"üåç –¢–µ—Å—Ç–æ–≤—ã–µ GEO: {', '.join(TEST_GEOS)}")
    print("=" * 80)
    
    results = test_hardcode_methods()
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Blik –æ—Ç–∫–ª—é—á–µ–Ω
    pl_result = results.get('PL_PLN', {})
    if 'error' in pl_result:
        print(f"‚ö†Ô∏è  PL_PLN –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {pl_result['error']}")
    elif pl_result.get('is_empty'):
        print(f"‚ö†Ô∏è  PL_PLN –ø—É—Å—Ç–æ–π")
    else:
        blik_found = pl_result.get('blik_found', False)
        if blik_found:
            print(f"‚ùå –û–®–ò–ë–ö–ê: Blik –≤—Å–µ –µ—â–µ –Ω–∞–π–¥–µ–Ω –≤ PL_PLN!")
        else:
            print(f"‚úÖ SUCCESS: Blik —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –≤ PL_PLN")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    other_geos = [geo for geo in TEST_GEOS if geo != 'PL_PLN']
    working_geos = []
    
    for geo in other_geos:
        result = results.get(geo, {})
        if not result.get('is_empty') and 'error' not in result:
            zimpler_found = result.get('zimpler_found', False)
            applepay_found = result.get('applepay_found', False)
            
            if geo == 'FI' and zimpler_found:
                working_geos.append(f"{geo} (Zimpler ‚úÖ)")
            elif geo != 'FI' and applepay_found:
                working_geos.append(f"{geo} (ApplePay ‚úÖ)")
            elif applepay_found:
                working_geos.append(f"{geo} (ApplePay ‚úÖ)")
    
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ —Ö–∞—Ä–¥–∫–æ–¥ –º–µ—Ç–æ–¥—ã: {', '.join(working_geos)}")
    
    print(f"\nüîß –ß–¢–û –ò–ó–ú–ï–ù–ï–ù–û:")
    print("   1. ‚ùå Blik –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö PL GEO")
    print("   2. ‚úÖ Zimpler –æ—Å—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è FI GEO")
    print("   3. ‚úÖ ApplePay Gumballpay –æ—Å—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –≤—Å–µ—Ö GEO")
    print("   4. üí° –ö–æ–¥ Blik –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è")
    
    print(f"\nüí° –ö–ê–ö –í–ö–õ–Æ–ß–ò–¢–¨ BLIK –û–ë–†–ê–¢–ù–û:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ frontend/src/panels/GeoMethodsPanel.jsx")
    print("   2. –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ 89-104 (–±–ª–æ–∫ —Å Blik)")
    print("   3. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ (—É–±–µ—Ä–∏—Ç–µ // –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫)")
    print("   4. –û–±–Ω–æ–≤–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ App.js (–¥–æ–±–∞–≤—å—Ç–µ '‚Ä¢ Blik (PL)')")
    
    print(f"\n‚ú® BLIK –£–°–ü–ï–®–ù–û –û–¢–ö–õ–Æ–ß–ï–ù!")
    
    return True

if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)
