#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞
"""

import json
import os
from datetime import datetime, date
from typing import List, Dict, Optional
import logging

class ExportLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ Google Sheets"""
    
    def __init__(self, log_file: str = "exports_log.json"):
        self.log_file = log_file
        self.logger = logging.getLogger(__name__)
    
    def log_export(self, project: str, geo: str = None, env: str = "prod", export_type: str = "single", sheet_url: str = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª
        
        Args:
            project: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            geo: GEO (–¥–ª—è single —ç–∫—Å–ø–æ—Ä—Ç–∞)
            env: –û–∫—Ä—É–∂–µ–Ω–∏–µ (prod/stage)
            export_type: –¢–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ (single/multi/full)
            sheet_url: URL Google Sheets —Ñ–∞–π–ª–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            export_record = {
                "timestamp": datetime.now().isoformat(),
                "date": date.today().isoformat(),
                "project": project,
                "geo": geo,
                "env": env,
                "export_type": export_type,
                "sheet_url": sheet_url
            }
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            exports = self._read_exports()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            exports.append(export_record)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            self._write_exports(exports)
            
            self.logger.info(f"üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω: {project} - {export_type} ({env})")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    def get_today_exports(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç–∫—Å–ø–æ—Ä—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            exports = self._read_exports()
            today_str = date.today().isoformat()
            
            today_exports = [
                export for export in exports 
                if export.get("date") == today_str
            ]
            
            return today_exports
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
            return []
    
    def get_exports_by_date(self, target_date: date) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç–∫—Å–ø–æ—Ä—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        try:
            exports = self._read_exports()
            date_str = target_date.isoformat()
            
            date_exports = [
                export for export in exports 
                if export.get("date") == date_str
            ]
            
            return date_exports
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ {target_date}: {e}")
            return []
    
    def get_today_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today_exports = self.get_today_exports()
            
            if not today_exports:
                return {
                    "total": 0,
                    "projects": [],
                    "by_type": {},
                    "by_env": {},
                    "exports": []
                }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            projects = list(set(export["project"] for export in today_exports))
            
            by_type = {}
            by_env = {}
            
            for export in today_exports:
                export_type = export.get("export_type", "unknown")
                env = export.get("env", "unknown")
                
                by_type[export_type] = by_type.get(export_type, 0) + 1
                by_env[env] = by_env.get(env, 0) + 1
            
            return {
                "total": len(today_exports),
                "projects": sorted(projects),
                "by_type": by_type,
                "by_env": by_env,
                "exports": today_exports
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
            return {"total": 0, "projects": [], "by_type": {}, "by_env": {}, "exports": []}
    
    def _read_exports(self) -> List[Dict]:
        """–ß–∏—Ç–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.log_file):
            return []
        
        try:
            with open(self.log_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            return []
    
    def _write_exports(self, exports: List[Dict]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.log_file, 'w', encoding='utf-8') as f:
                json.dump(exports, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤: {e}")
    
    def get_latest_sheets_by_project(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ Google Sheets —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            exports = self._read_exports()
            
            if not exports:
                return {}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
            project_latest = {}
            
            for export in exports:
                project = export.get("project")
                sheet_url = export.get("sheet_url")
                timestamp = export.get("timestamp")
                
                if not project or not sheet_url or not timestamp:
                    continue
                
                # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–∞–π–¥–µ–Ω –±–æ–ª–µ–µ –Ω–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç
                if (project not in project_latest or 
                    timestamp > project_latest[project]["timestamp"]):
                    
                    project_latest[project] = {
                        "sheet_url": sheet_url,
                        "timestamp": timestamp,
                        "date": export.get("date"),
                        "geo": export.get("geo"),
                        "env": export.get("env"),
                        "export_type": export.get("export_type")
                    }
            
            return project_latest
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫: {e}")
            return {}

    def cleanup_old_exports(self, days_to_keep: int = 30):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
        try:
            exports = self._read_exports()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ—Ç—Å–µ—á–µ–Ω–∏—è
            from datetime import timedelta
            cutoff_date = (date.today() - timedelta(days=days_to_keep)).isoformat()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ã
            filtered_exports = [
                export for export in exports
                if export.get("date", "1970-01-01") >= cutoff_date
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
            self._write_exports(filtered_exports)
            
            removed_count = len(exports) - len(filtered_exports)
            if removed_count > 0:
                self.logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —ç–∫—Å–ø–æ—Ä—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export_logger = ExportLogger()

def log_export(project: str, geo: str = None, env: str = "prod", export_type: str = "single", sheet_url: str = None):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    export_logger.log_export(project, geo, env, export_type, sheet_url)

def get_today_exports_summary() -> Dict:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    return export_logger.get_today_summary()
