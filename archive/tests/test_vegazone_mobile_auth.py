#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —ç–º—É–ª—è—Ü–∏–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è Vegazone
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ 0depnoaff*mobi –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É—é—Ç—Å—è –∏ —ç–º—É–ª–∏—Ä—É—é—Ç –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from extractors.vegazone_extractor import VegazoneExtractor
from main import password_data
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_vegazone_mobile_auth():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —ç–º—É–ª—è—Ü–∏—é –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è Vegazone"""
    print('üß™ –¢–ï–°–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ò –ú–û–ë–ò–õ–¨–ù–û–ô –≠–ú–£–õ–Ø–¶–ò–ò –î–õ–Ø VEGAZONE')
    print('='*70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ DE –∏ IT
    test_cases = [
        {
            "geo": "DE",
            "login": "0depnoaffdeeurmobi",
            "expected_methods": [
                "M_Directcorefy_Cards_0DEP//mob//noaff",
                "V/M_Corefy_Cards_0DEP//mob//aff", 
                "V/M_Directcorefy_Cards_0DEP//desktop",
                "V/M_Corefy_Cards_1DEP"
            ]
        },
        {
            "geo": "IT", 
            "login": "0depnoaffiteurmobi",
            "expected_methods": [
                "M_Directcorefy_Cards_0DEP//mob//noaff",  # ‚Üê –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ—Ä—è–µ—Ç—Å—è!
                "V/M_Corefy_Cards_0DEP//mob//aff",
                "V/M_Directcorefy_Cards_0DEP//desktop", 
                "V/M_Corefy_Cards_1DEP"
            ]
        }
    ]
    
    for case in test_cases:
        print(f"\nüìã –¢–ï–°–¢–ò–†–£–ï–ú {case['geo']} —Å –ª–æ–≥–∏–Ω–æ–º {case['login']}")
        print("-" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
        extractor = VegazoneExtractor(
            login=case['login'],
            password=password_data,
            base_url="https://vegazone.com"
        )
        
        print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        auth_success = extractor.authenticate()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if auth_success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        if 'mobi' in case['login']:
            print(f"üì± –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞ (User-Agent: iPhone)")
        else:
            print(f"üñ•Ô∏è  –î–µ—Å–∫—Ç–æ–ø —Ä–µ–∂–∏–º")
            
        print(f"üí∞ –í–∞–ª—é—Ç–∞: {extractor.currency}")
        print(f"üè¶ –î–µ–ø–æ–∑–∏—Ç–æ–≤: {extractor.deposit_count}")
        
        print(f"\nüîç –ü–û–õ–£–ß–ê–ï–ú –ú–ï–¢–û–î–´ –î–õ–Ø {case['geo']}...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥—ã
            (deposit_enriched, wd_titles, dep_names, wd_names, 
             currency, deposit_count, recommended_methods) = extractor.get_payment_and_withdraw_systems(case['geo'])
            
            print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(deposit_enriched)}")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ withdraw –º–µ—Ç–æ–¥–æ–≤: {len(wd_titles)}")
            print(f"   ‚Ä¢ –í–∞–ª—é—Ç–∞: {currency}")
            print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö: {len(recommended_methods)}")
            
            print(f"\nüìã –î–ï–ü–û–ó–ò–¢–ù–´–ï –ú–ï–¢–û–î–´:")
            found_methods = []
            for i, method in enumerate(deposit_enriched, 1):
                title = method['title']
                name = method['name']
                min_dep = method.get('min_deposit', 'N/A')
                cur = method.get('currency', 'N/A')
                
                print(f"   {i:2d}. {title} ‚Üí {name} | {min_dep} {cur}")
                found_methods.append(name)
            
            print(f"\nüîç –ê–ù–ê–õ–ò–ó –û–ñ–ò–î–ê–ï–ú–´–• –ú–ï–¢–û–î–û–í:")
            for expected in case['expected_methods']:
                if expected in found_methods:
                    print(f"   ‚úÖ {expected} - –ù–ê–ô–î–ï–ù")
                else:
                    print(f"   ‚ùå {expected} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
            
            print(f"\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´:")
            for found in found_methods:
                if found not in case['expected_methods']:
                    print(f"   ‚ûï {found} - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π")
                    
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–æ–≤: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\n" + "="*70)
    print("üéØ –í–´–í–û–î–´:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞–∑–ª–∏—á–∏–π –≤ API –æ—Ç–≤–µ—Ç–∞—Ö")
    print("2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ User-Agent –∑–∞–≥–æ–ª–æ–≤–∫–∏")
    print("3. –°—Ä–∞–≤–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤ –º–µ–∂–¥—É DE –∏ IT")
    print("4. –ò—â–∏—Ç–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–π –º–µ—Ç–æ–¥ M_Directcorefy_Cards_0DEP//mob//noaff –≤ IT")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_vegazone_mobile_auth()
    return True

if __name__ == "__main__":
    main()
