#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ SpinEmpire —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º Binance Pay
"""

import requests
import json
from datetime import datetime

def test_spinempire_binance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–æ SpinEmpire –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Binance Pay"""
    print('üß™ –¢–ï–°–¢ SPINEMPIRE –≠–ö–°–¢–†–ê–ö–¢–û–†–ê –° BINANCE PAY')
    print('='*60)
    print(f'üìÖ –í—Ä–µ–º—è: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {"geo": "DE", "env": "stage", "description": "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è Stage"},
        {"geo": "IT", "env": "stage", "description": "üáÆüáπ –ò—Ç–∞–ª–∏—è Stage"},
        {"geo": "FI", "env": "prod", "description": "üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è Prod"},
        {"geo": "PL_PLN", "env": "stage", "description": "üáµüá± –ü–æ–ª—å—à–∞ PLN Stage"},
    ]
    
    success_count = 0
    total_tests = len(test_cases)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f'{i}. {test_case["description"]}')
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(
                "http://localhost:8000/get-methods-only",
                json={
                    "project": "SpinEmpire",
                    "geo": test_case["geo"],
                    "login": "test",
                    "env": test_case["env"]
                },
                timeout=30
            )
            
            if response.status_code != 200:
                print(f'   ‚ùå HTTP {response.status_code}: {response.text}')
                continue
            
            data = response.json()
            methods = data.get('methods', [])
            
            # –ò—â–µ–º Binance Pay
            binance_methods = [
                m for m in methods 
                if 'binance' in m.get('title', '').lower() or 
                   'binance' in m.get('name', '').lower()
            ]
            
            print(f'   üìä –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤: {len(methods)}')
            print(f'   üéØ Binance Pay –º–µ—Ç–æ–¥–æ–≤: {len(binance_methods)}')
            
            if binance_methods:
                print(f'   ‚úÖ Binance Pay –Ω–∞–π–¥–µ–Ω!')
                for method in binance_methods:
                    title = method.get('title', 'N/A')
                    name = method.get('name', 'N/A')
                    is_test = method.get('is_test_method', False)
                    print(f'      - {title} ({name}) {"[–¢–ï–°–¢]" if is_test else "[API]"}')
                success_count += 1
            else:
                print(f'   ‚ùå Binance Pay –ù–ï –Ω–∞–π–¥–µ–Ω!')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –º–µ—Ç–æ–¥—ã
            print(f'   üìã –ü–µ—Ä–≤—ã–µ 3 –º–µ—Ç–æ–¥–∞:')
            for j, method in enumerate(methods[:3]):
                title = method.get('title', 'N/A')
                name = method.get('name', 'N/A')
                print(f'      {j+1}. {title} ({name})')
                
        except Exception as e:
            print(f'   ‚ùå –û—à–∏–±–∫–∞: {e}')
        
        print()
    
    # –ò—Ç–æ–≥–∏
    print('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:')
    print(f'   –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests}')
    print(f'   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/total_tests)*100:.1f}%')
    print()
    
    if success_count == total_tests:
        print('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!')
        print('‚úÖ SpinEmpire —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Binance Pay')
        print('‚úÖ –ù–æ–≤—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        print('‚úÖ –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º Rolling —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–µ')
        print()
        print('üîß –û–°–û–ë–ï–ù–ù–û–°–¢–ò –ù–û–í–û–ì–û –≠–ö–°–¢–†–ê–ö–¢–û–†–ê:')
        print('   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ Binance Pay –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ API')
        print('   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –ø–æ—Ä—è–¥–∫–∞ –º–µ—Ç–æ–¥–æ–≤')
        print('   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç')
        print('   ‚Ä¢ –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤')
        print('   ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏')
        return True
    else:
        print('‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò')
        print('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏')
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = test_spinempire_binance()
    
    print(f'\nüìã –ß–¢–û –ë–´–õ–û –°–î–ï–õ–ê–ù–û:')
    print('   1. üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π SpinEmpire —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä')
    print('   2. üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Rolling —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞')
    print('   3. üéØ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Binance Pay')
    print('   4. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –±—ç–∫–µ–Ω–¥ —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º')
    print('   5. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ GEO –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    
    print(f'\nüéØ –ì–ê–†–ê–ù–¢–ò–ò –ù–û–í–û–ì–û –≠–ö–°–¢–†–ê–ö–¢–û–†–ê:')
    print('   ‚Ä¢ Binance Pay –í–°–ï–ì–î–ê –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö')
    print('   ‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç –≤ API - –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
    print('   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤')
    print('   ‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º')
    
    if success:
        print(f'\n‚ú® SPINEMPIRE –≠–ö–°–¢–†–ê–ö–¢–û–† –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!')
        print('   –¢–µ–ø–µ—Ä—å Binance Pay –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–∞—Ö!')
    else:
        print(f'\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê')
        print('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥')
    
    return success

if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)
