#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
"""

import requests
import json
from datetime import datetime
from telegram_config import TelegramConfig
from export_logger import get_today_exports_summary, ExportLogger

def test_telegram_bot_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Telegram –±–æ—Ç–∞"""
    print('ü§ñ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò TELEGRAM –ë–û–¢–ê')
    print('='*60)
    print(f'üìÖ –í—Ä–µ–º—è: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
    print()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
    print('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ë–û–¢–ê:')
    print('-'*40)
    
    if TelegramConfig.is_configured():
        bot_token = TelegramConfig.get_bot_token()
        chat_id = TelegramConfig.get_chat_id()
        print(f'‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        print(f'   Bot Token: {bot_token[:10]}...')
        print(f'   Chat ID: {chat_id}')
    else:
        print('‚ùå Telegram –±–æ—Ç –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        return False
    
    print()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
    print('2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –≠–ö–°–ü–û–†–¢–û–í:')
    print('-'*40)
    
    try:
        logger = ExportLogger()
        today_stats = logger.get_today_summary()
        
        print(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:')
        print(f'   –í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: {today_stats["total"]}')
        print(f'   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(today_stats["projects"])}')
        print(f'   –¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: {today_stats["by_type"]}')
        print(f'   –û–∫—Ä—É–∂–µ–Ω–∏—è: {today_stats["by_env"]}')
        
        print(f'üè¢ –ü—Ä–æ–µ–∫—Ç—ã:')
        for project in today_stats["projects"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            count = sum(1 for exp in today_stats["exports"] if exp["project"] == project)
            print(f'   {project}: {count} —ç–∫—Å–ø–æ—Ä—Ç–æ–≤')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}')
        return False
    
    print()
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    print('3Ô∏è‚É£ –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:')
    print('-'*40)
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ API
        test_export_data = {
            "data": [
                {"Paymethod": "Test Method", "Currency": "EUR", "Deposit": "YES"},
                {"Paymethod": "Another Method", "Currency": "EUR", "Deposit": "NO"}
            ],
            "project": "TestProject",
            "geo": "DE", 
            "env": "stage"
        }
        
        print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç...')
        response = requests.post(
            "http://localhost:8000/export-table-to-sheets",
            json=test_export_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f'‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: {result.get("sheet_url", "N/A")}')
            print(f'üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        else:
            print(f'‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {response.status_code} - {response.text}')
            return False
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
        return False
    
    print()
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    print('4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –õ–û–ì–û–í:')
    print('-'*40)
    
    try:
        updated_stats = logger.get_today_summary()
        print(f'üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
        print(f'   –í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: {updated_stats["total"]}')
        
        if updated_stats["total"] > today_stats["total"]:
            print('‚úÖ –õ–æ–≥–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å - –Ω–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!')
        else:
            print('‚ö†Ô∏è  –õ–æ–≥–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å - –≤–æ–∑–º–æ–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –ø—Ä–æ—à–µ–ª')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}')
    
    print()
    
    # 5. –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print('üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:')
    print('-'*40)
    
    print('‚úÖ –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:')
    print('   ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞')
    print('   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤')
    print('   ‚Ä¢ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    print('   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ª–æ–≥–æ–≤')
    
    print()
    print('ü§ñ –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:')
    print('   /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')
    print('   /today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    print('   /projects - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º')
    print('   /help - –°–ø—Ä–∞–≤–∫–∞')
    
    print()
    print('üì± –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ê–ù–î:')
    print('   1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram')
    print('   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /today')
    print('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π')
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = test_telegram_bot_integration()
    
    print()
    print('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:')
    print('='*40)
    
    if success:
        print('‚úÖ TELEGRAM –ë–û–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!')
        print()
        print('üîÑ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:')
        print('   1. –ü—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Google Sheets —á–µ—Ä–µ–∑ API')
        print('   2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
        print('   3. –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ exports_log.json')
        print('   4. –ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
        print()
        print('üìä –î–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
        print('   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å')
        print('   ‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
        print('   ‚Ä¢ –¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ (single/multi/full)')
        print('   ‚Ä¢ –û–∫—Ä—É–∂–µ–Ω–∏—è (prod/stage)')
        print()
        print('‚ú® –í–°–ï –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!')
    else:
        print('‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê')
        print('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã')
    
    return success

if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)
