#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (–±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ event loop)
"""

import subprocess
import sys
import os
from telegram_config import TelegramConfig

def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    print('ü§ñ –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê –° –ö–û–ú–ê–ù–î–ê–ú–ò')
    print('='*50)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not TelegramConfig.is_configured():
        print('‚ùå Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!')
        print()
        print('üìã –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–∏—Ç–µ telegram_config.py')
        return False
    
    bot_token = TelegramConfig.get_bot_token()
    chat_id = TelegramConfig.get_chat_id()
    
    print('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:')
    print(f'   Bot Token: {bot_token[:15]}...')
    print(f'   Chat ID: {chat_id}')
    print()
    
    print('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...')
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    bot_script = f'''
import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from export_logger import ExportLogger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_message = """
ü§ñ <b>B2B Automation Tool Bot</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ Google Sheets.

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/projects - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üîî –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è—é –æ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ!
"""
    await update.message.reply_text(welcome_message, parse_mode='HTML')

async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /today - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        logger = ExportLogger()
        stats = logger.get_today_summary()
        
        if stats["total"] == 0:
            message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\\n\\n‚ùå –°–µ–≥–æ–¥–Ω—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ –±—ã–ª–æ"
        else:
            message = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>

üìà –í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: <b>{{stats["total"]}}</b>
üè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: <b>{{len(stats["projects"])}}</b>

üìã <b>–¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤:</b>"""
            
            for export_type, count in stats["by_type"].items():
                message += f"\\n   ‚Ä¢ {{export_type}}: {{count}}"
            
            message += "\\n\\nüåç <b>–û–∫—Ä—É–∂–µ–Ω–∏—è:</b>"
            for env, count in stats["by_env"].items():
                message += f"\\n   ‚Ä¢ {{env}}: {{count}}"
            
            if stats["projects"]:
                message += "\\n\\nüè¢ <b>–ü—Ä–æ–µ–∫—Ç—ã:</b>"
                for project in stats["projects"][:5]:
                    count = sum(1 for exp in stats["exports"] if exp["project"] == project)
                    message += f"\\n   ‚Ä¢ {{project}}: {{count}}"
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /today: {{e}}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def projects_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /projects - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        logger = ExportLogger()
        stats = logger.get_today_summary()
        
        if stats["total"] == 0:
            message = "üè¢ <b>–ü—Ä–æ–µ–∫—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\\n\\n‚ùå –°–µ–≥–æ–¥–Ω—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ –±—ã–ª–æ"
        else:
            message = f"üè¢ <b>–ü—Ä–æ–µ–∫—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\\n\\n"
            
            for project in stats["projects"]:
                project_exports = [exp for exp in stats["exports"] if exp["project"] == project]
                count = len(project_exports)
                
                # –¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
                types = {{}}
                envs = {{}}
                
                for exp in project_exports:
                    exp_type = exp.get("export_type", "unknown")
                    env = exp.get("env", "unknown")
                    types[exp_type] = types.get(exp_type, 0) + 1
                    envs[env] = envs.get(env, 0) + 1
                
                message += f"üìÅ <b>{{project}}</b> ({{count}} —ç–∫—Å–ø–æ—Ä—Ç–æ–≤)\\n"
                
                if types:
                    type_str = ", ".join([f"{{k}}({{v}})" for k, v in types.items()])
                    message += f"   üìã –¢–∏–ø—ã: {{type_str}}\\n"
                
                if envs:
                    env_str = ", ".join([f"{{k}}({{v}})" for k, v in envs.items()])
                    message += f"   üåç –û–∫—Ä—É–∂–µ–Ω–∏—è: {{env_str}}\\n"
                
                message += "\\n"
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /projects: {{e}}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_message = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/projects - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Google Sheets.

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ (single/multi/full)
‚Ä¢ –û–∫—Ä—É–∂–µ–Ω–∏—è (prod/stage)

‚ú® –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ —ç–∫—Å–ø–æ—Ä—Ç—ã!
"""
    await update.message.reply_text(help_message, parse_mode='HTML')

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token("{bot_token}").build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("today", today_command))
    application.add_handler(CommandHandler("projects", projects_command))
    application.add_handler(CommandHandler("help", help_command))
    
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /today, /projects, /help")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
'''
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    script_path = "temp_telegram_bot.py"
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(bot_script)
    
    print('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:')
    print('   /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')
    print('   /today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    print('   /projects - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    print('   /help - –°–ø—Ä–∞–≤–∫–∞')
    print()
    print('üîî –ë–æ—Ç —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    print('   –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Google Sheets —Ñ–∞–π–ª–æ–≤')
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        result = subprocess.run([
            sys.executable, script_path
        ], cwd=os.getcwd())
        
        return result.returncode == 0
        
    except KeyboardInterrupt:
        print('\\n‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
        return True
    except Exception as e:
        print(f'\\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}')
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(script_path):
            os.remove(script_path)

if __name__ == "__main__":
    success = start_telegram_bot()
    sys.exit(0 if success else 1)
