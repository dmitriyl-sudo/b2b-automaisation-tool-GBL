#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ Apple Pay –¥–ª—è EUR GEO
"""

def test_apple_pay_euro_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Apple Pay —Ç–æ–ª—å–∫–æ –¥–ª—è EUR GEO"""
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ getCurrencyFromGeoName
    def get_currency_from_geo_name(geo_name):
        if not geo_name:
            return 'EUR'
        geo_upper = geo_name.upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ GEO
        if '_PLN' in geo_upper:
            return 'PLN'
        if '_DKK' in geo_upper:
            return 'DKK'
        if '_CHF' in geo_upper:
            return 'CHF'
        if '_NOK' in geo_upper:
            return 'NOK'
        if '_HUF' in geo_upper:
            return 'HUF'
        if '_AUD' in geo_upper:
            return 'AUD'
        if '_CAD' in geo_upper:
            return 'CAD'
        if '_USD' in geo_upper:
            return 'USD'
        
        # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - EUR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 'EUR'
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ EUR GEO
    def is_euro_geo(geo_name, currency):
        geo_upper = (geo_name or '').upper()
        
        return (currency == 'EUR' or 
                ('_EUR' in geo_upper) or
                (any(geo_upper.startswith(geo) for geo in ['FI', 'AT', 'DE', 'IT', 'SE', 'GR', 'IE', 'ES', 'PT']) and '_' not in geo_upper))
    
    print('üß™ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò APPLE PAY –î–õ–Ø EUR GEO')
    print('='*50)
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        # EUR GEO (–¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å Apple Pay)
        ('FI', 'EUR', True, 'üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è (EUR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'),
        ('AT', 'EUR', True, 'üá¶üáπ –ê–≤—Å—Ç—Ä–∏—è (EUR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'),
        ('DE', 'EUR', True, 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è (EUR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'),
        ('IT', 'EUR', True, 'üáÆüáπ –ò—Ç–∞–ª–∏—è (EUR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'),
        ('SE', 'EUR', True, 'üá∏üá™ –®–≤–µ—Ü–∏—è (EUR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'),
        ('PL_EUR', 'EUR', True, 'üáµüá± –ü–æ–ª—å—à–∞ EUR'),
        ('DK_EUR', 'EUR', True, 'üá©üá∞ –î–∞–Ω–∏—è EUR'),
        ('CH_EUR', 'EUR', True, 'üá®üá≠ –®–≤–µ–π—Ü–∞—Ä–∏—è EUR'),
        ('NO_EUR', 'EUR', True, 'üá≥üá¥ –ù–æ—Ä–≤–µ–≥–∏—è EUR'),
        ('HU_EUR', 'EUR', True, 'üá≠üá∫ –í–µ–Ω–≥—Ä–∏—è EUR'),
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã (–ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å Apple Pay)
        ('PL_PLN', 'PLN', False, 'üáµüá± –ü–æ–ª—å—à–∞ PLN (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞)'),
        ('DK_DKK', 'DKK', False, 'üá©üá∞ –î–∞–Ω–∏—è DKK (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞)'),
        ('CH_CHF', 'CHF', False, 'üá®üá≠ –®–≤–µ–π—Ü–∞—Ä–∏—è CHF (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞)'),
        ('NO_NOK', 'NOK', False, 'üá≥üá¥ –ù–æ—Ä–≤–µ–≥–∏—è NOK (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞)'),
        ('HU_HUF', 'HUF', False, 'üá≠üá∫ –í–µ–Ω–≥—Ä–∏—è HUF (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞)'),
        ('AU_AUD', 'AUD', False, 'üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è AUD (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞)'),
        ('CA_CAD', 'CAD', False, 'üá®üá¶ –ö–∞–Ω–∞–¥–∞ CAD (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞)'),
    ]
    
    print('‚úÖ –¢–ï–°–¢–û–í–´–ï –°–õ–£–ß–ê–ò:')
    print()
    
    success_count = 0
    total_count = len(test_cases)
    
    for geo, expected_currency, should_have_apple_pay, description in test_cases:
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É
        actual_currency = get_currency_from_geo_name(geo)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É EUR GEO
        is_euro = is_euro_geo(geo, actual_currency)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        currency_correct = actual_currency == expected_currency
        apple_pay_correct = is_euro == should_have_apple_pay
        
        if currency_correct and apple_pay_correct:
            status = '‚úÖ'
            success_count += 1
        else:
            status = '‚ùå'
        
        print(f'{status} {description}')
        print(f'   GEO: {geo} ‚Üí –í–∞–ª—é—Ç–∞: {actual_currency} ‚Üí Apple Pay: {"–î–ê" if is_euro else "–ù–ï–¢"}')
        
        if not currency_correct:
            print(f'   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–∞–ª—é—Ç—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_currency}, –ø–æ–ª—É—á–µ–Ω–æ {actual_currency}')
        if not apple_pay_correct:
            print(f'   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ Apple Pay: –æ–∂–∏–¥–∞–ª–æ—Å—å {"–î–ê" if should_have_apple_pay else "–ù–ï–¢"}, –ø–æ–ª—É—á–µ–Ω–æ {"–î–ê" if is_euro else "–ù–ï–¢"}')
        print()
    
    print('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:')
    print(f'   –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_count}')
    print(f'   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/total_count)*100:.1f}%')
    print()
    
    if success_count == total_count:
        print('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!')
        print('‚úÖ –õ–æ–≥–∏–∫–∞ Apple Pay –¥–ª—è EUR GEO —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        print()
        print('üìã –õ–û–ì–ò–ö–ê:')
        print('   ‚Ä¢ Apple Pay –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è EUR GEO')
        print('   ‚Ä¢ EUR GEO: FI, AT, DE, IT, SE, GR, IE, ES, PT (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞)')
        print('   ‚Ä¢ EUR GEO: *_EUR (—Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _EUR)')
        print('   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω—ã: *_PLN, *_DKK, *_CHF, etc.')
        return True
    else:
        print('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò')
        print('   –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏')
        return False

if __name__ == "__main__":
    import sys
    success = test_apple_pay_euro_logic()
    sys.exit(0 if success else 1)
