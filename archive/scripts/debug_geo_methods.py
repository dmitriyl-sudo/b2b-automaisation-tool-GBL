#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ GeoMethodsPanel
"""

import requests
import json
import sys
import os
from pathlib import Path

def check_api_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ FastAPI —Å–µ—Ä–≤–µ—Ä
        response = requests.get('http://localhost:8000/docs', timeout=5)
        print("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        return True
    except requests.exceptions.ConnectionError:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç
            response = requests.get('http://localhost:5000/docs', timeout=5)
            print("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
            return True
        except requests.exceptions.ConnectionError:
            print("‚ùå FastAPI —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

def check_frontend_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ–∞–π–ª–æ–≤"""
    files_to_check = [
        'frontend/src/panels/GeoMethodsPanel.jsx',
        'frontend/src/App.js',
        'api_fastapi_backend.py'
    ]
    
    all_exist = True
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_exist = False
    
    return all_exist

def check_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    endpoints = [
        '/export-table-to-sheets',
        '/export-table-to-sheets-multi'
    ]
    
    base_urls = ['http://localhost:8000', 'http://localhost:5000']
    
    for base_url in base_urls:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–∞ {base_url}:")
        for endpoint in endpoints:
            try:
                # –ü—Ä–æ–±—É–µ–º POST –∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                response = requests.post(f'{base_url}{endpoint}', 
                                       json={'data': []}, 
                                       timeout=5)
                if response.status_code in [200, 422]:  # 422 - validation error, –Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    print(f"  ‚úÖ {endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"  ‚ö†Ô∏è  {endpoint} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            except requests.exceptions.ConnectionError:
                print(f"  ‚ùå {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç)")
            except Exception as e:
                print(f"  ‚ùå {endpoint} –æ—à–∏–±–∫–∞: {e}")

def check_google_sheets_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google Sheets"""
    config_files = [
        'client_secret.json',
        'token.pickle'
    ]
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google Sheets:")
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"  ‚úÖ {config_file} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"  ‚ùå {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python"""
    required_packages = [
        'fastapi',
        'uvicorn',
        'requests',
        'gspread',
        'google-auth',
        'openpyxl'
    ]
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\nüí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"pip install {' '.join(missing_packages)}")

def check_frontend_build():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    frontend_dir = Path('frontend')
    
    if not frontend_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    package_json = frontend_dir / 'package.json'
    node_modules = frontend_dir / 'node_modules'
    
    if package_json.exists():
        print("‚úÖ package.json –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if node_modules.exists():
        print("‚úÖ node_modules –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'npm install' –≤ –ø–∞–ø–∫–µ frontend")
        return False
    
    return True

def main():
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ GeoMethodsPanel\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    check_frontend_files()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞:")
    api_running = check_api_server()
    
    if api_running:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        check_api_endpoints()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Sheets
    check_google_sheets_config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:")
    check_frontend_build()
    
    print("\n" + "="*50)
    print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú:")
    print("="*50)
    
    if not api_running:
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä:")
        print("   cd /Users/dimalogin/Downloads/b2b-automaisation-tool-mvp")
        print("   python3 api_fastapi_backend.py")
    
    print("\nüåê –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ):")
    print("   cd /Users/dimalogin/Downloads/b2b-automaisation-tool-mvp/frontend")
    print("   npm install  # –µ—Å–ª–∏ node_modules –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    print("   npm start")
    
    print("\nüîë –î–ª—è —Ä–∞–±–æ—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
    print("   - client_secret.json —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API")
    print("   - token.pickle —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    print("\nüêõ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("   - –ö–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –Ω–∞ –Ω–∞–ª–∏—á–∏–µ JavaScript –æ—à–∏–±–æ–∫")
    print("   - Network –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("   - –õ–æ–≥–∏ API —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")

if __name__ == "__main__":
    main()
