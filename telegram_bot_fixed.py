#!/usr/bin/env python3
"""
Telegram –±–æ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º event loop –ø—Ä–æ–±–ª–µ–º—ã –∏ –º–∞—Å—Å–æ–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import asyncio
import logging
import nest_asyncio
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError
from telegram_config import TelegramConfig
from export_logger import ExportLogger
from user_manager import get_user_manager, add_user_from_update
from datetime import datetime

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å event loop
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
_bot_instance: Bot = None

def init_bot_instance(bot_token: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global _bot_instance
    _bot_instance = Bot(token=bot_token)
    return _bot_instance

def get_bot_instance() -> Bot:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    return _bot_instance

async def send_notification_to_all_users(message: str, parse_mode: str = 'HTML'):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML/Markdown)
    """
    if not _bot_instance:
        logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return
    
    user_manager = get_user_manager()
    active_users = user_manager.get_all_active_users()
    
    if not active_users:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return
    
    success_count = 0
    error_count = 0
    
    for user_id in active_users:
        try:
            await _bot_instance.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=parse_mode,
                disable_web_page_preview=False
            )
            success_count += 1
            logger.debug(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except TelegramError as e:
            error_count += 1
            if "bot was blocked by the user" in str(e).lower():
                logger.info(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                user_manager.deactivate_user(user_id)
            elif "chat not found" in str(e).lower():
                logger.info(f"üëª –ß–∞—Ç {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                user_manager.deactivate_user(user_id)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        except Exception as e:
            error_count += 1
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        await asyncio.sleep(0.1)
    
    logger.info(f"üìä –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ‚úÖ{success_count} —É—Å–ø–µ—à–Ω–æ, ‚ùå{error_count} –æ—à–∏–±–æ–∫")

async def send_sheet_notification_to_all(
    sheet_url: str, 
    project: str, 
    geo: str = None, 
    env: str = "prod",
    export_type: str = "single"
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º Google Sheets —Ñ–∞–π–ª–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
    Args:
        sheet_url: –°—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets —Ñ–∞–π–ª
        project: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        geo: GEO –∫–æ–¥ (–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞)
        env: –û–∫—Ä—É–∂–µ–Ω–∏–µ (prod/stage)
        export_type: –¢–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ (single/multi/full)
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""üöÄ <b>–ù–æ–≤—ã–π Google Sheets —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω!</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ <b>–ü—Ä–æ–µ–∫—Ç:</b> {project}
‚Ä¢ <b>–¢–∏–ø:</b> {export_type.title()} Export
‚Ä¢ <b>–û–∫—Ä—É–∂–µ–Ω–∏–µ:</b> {env.upper()}
{f'‚Ä¢ <b>GEO:</b> {geo}' if geo else ''}
‚Ä¢ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href="{sheet_url}">–û—Ç–∫—Ä—ã—Ç—å Google Sheets</a>

‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
üîí –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await send_notification_to_all_users(message)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    add_user_from_update(update)
    
    user_manager = get_user_manager()
    stats = user_manager.get_users_count()
    
    welcome_message = f"""ü§ñ <b>B2B Automation Tool Bot</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ Google Sheets.

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/projects - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
/users - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è—é –æ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –≤—Å–µ—Ö {stats['active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!

‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!"""
    
    await update.message.reply_text(welcome_message, parse_mode='HTML')

async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /today - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    add_user_from_update(update)
    
    try:
        export_logger = ExportLogger()
        stats = export_logger.get_today_summary()
        
        if stats["total"] == 0:
            message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n‚ùå –°–µ–≥–æ–¥–Ω—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ –±—ã–ª–æ"
        else:
            message = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>

üìà –í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: <b>{stats["total"]}</b>
üè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: <b>{len(stats["projects"])}</b>

üìã <b>–¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤:</b>"""
            
            for export_type, count in stats["by_type"].items():
                message += f"\n   ‚Ä¢ {export_type}: {count}"
            
            message += "\n\nüåç <b>–û–∫—Ä—É–∂–µ–Ω–∏—è:</b>"
            for env, count in stats["by_env"].items():
                message += f"\n   ‚Ä¢ {env}: {count}"
            
            if stats["projects"]:
                message += "\n\nüè¢ <b>–ü—Ä–æ–µ–∫—Ç—ã:</b>"
                for project in stats["projects"][:5]:
                    count = sum(1 for exp in stats["exports"] if exp["project"] == project)
                    message += f"\n   ‚Ä¢ {project}: {count}"
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /today: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def projects_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /projects - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ Google Sheets"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    add_user_from_update(update)
    
    try:
        export_logger = ExportLogger()
        latest_sheets = export_logger.get_latest_sheets_by_project()
        
        if not latest_sheets:
            message = "üè¢ <b>–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã</b>\n\n‚ùå –≠–∫—Å–ø–æ—Ä—Ç–æ–≤ –µ—â–µ –Ω–µ –±—ã–ª–æ"
        else:
            message = f"üè¢ <b>–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ Google Sheets</b>\n\n"
            
            for project, sheet_info in latest_sheets.items():
                sheet_url = sheet_info["sheet_url"]
                geo = sheet_info.get("geo", "N/A")
                env = sheet_info.get("env", "N/A")
                export_type = sheet_info.get("export_type", "N/A")
                date = sheet_info.get("date", "N/A")
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if "spreadsheets/d/" in sheet_url:
                    sheet_id = sheet_url.split("spreadsheets/d/")[1].split("/")[0]
                    short_id = sheet_id[:8] + "..."
                else:
                    short_id = "sheet"
                
                message += f"üìÅ <b>{project}</b>\n"
                message += f"   üîó <a href='{sheet_url}'>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç ({short_id})</a>\n"
                message += f"   üìä {geo} | {env} | {export_type}\n"
                message += f"   üìÖ {date}\n\n"
        
        await update.message.reply_text(message, parse_mode='HTML', disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /projects: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /users - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    add_user_from_update(update)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    admin_chat_id = TelegramConfig.get_chat_id()
    user_id = str(update.effective_user.id)
    
    if user_id != admin_chat_id:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        user_manager = get_user_manager()
        stats = user_manager.get_users_count()
        users_info = user_manager.get_users_info()
        
        message = f"""üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total']}</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{stats['active']}</b>
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: <b>{stats['inactive']}</b>

üë§ <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>"""
        
        for i, user in enumerate(users_info[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10
            status = "‚úÖ" if user['active'] else "‚ùå"
            last_seen = datetime.fromisoformat(user['last_seen']).strftime('%d.%m %H:%M')
            message += f"\n{i}. {status} {user['display_name']} (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_seen})"
        
        if len(users_info) > 10:
            message += f"\n\n... –∏ –µ—â–µ {len(users_info) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        message += "\n\nüí° –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Ç–µ, –∫—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /users: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    add_user_from_update(update)
    
    user_manager = get_user_manager()
    stats = user_manager.get_users_count()
    
    help_message = f"""üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/projects - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
/users - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (–∞–¥–º–∏–Ω—ã)
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö Google Sheets —Ñ–∞–π–ª–∞—Ö –≤—Å–µ–º {stats['active']} –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ (single/multi/full)
‚Ä¢ –û–∫—Ä—É–∂–µ–Ω–∏—è (prod/stage)

‚ú® <b>–ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç 24/7 –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üí° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É!"""
    
    await update.message.reply_text(help_message, parse_mode='HTML')

def send_sheet_notification_to_all_sync(
    sheet_url: str, 
    project: str, 
    geo: str = None, 
    env: str = "prod",
    export_type: str = "single"
) -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return loop.run_until_complete(
            send_sheet_notification_to_all(
                sheet_url=sheet_url,
                project=project,
                geo=geo,
                env=env,
                export_type=export_type
            )
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {e}")
        return False

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º event loop"""
    print("ü§ñ –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not TelegramConfig.is_configured():
        print("‚ùå Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    bot_token = TelegramConfig.get_bot_token()
    chat_id = TelegramConfig.get_chat_id()
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {bot_token[:10]}... -> {chat_id}")
    print("üìã –ö–æ–º–∞–Ω–¥—ã: /start, /today, /projects, /help")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        init_bot_instance(bot_token)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("today", today_command))
        application.add_handler(CommandHandler("projects", projects_command))
        application.add_handler(CommandHandler("users", users_command))
        application.add_handler(CommandHandler("help", help_command))
        
        print("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º event loop
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = loop.create_task(application.run_polling())
            print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º event loop")
            return task
        else:
            # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            loop.run_until_complete(application.run_polling())
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º nest_asyncio –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è event loop
    try:
        import nest_asyncio
        nest_asyncio.apply()
        print("‚úÖ nest_asyncio –ø—Ä–∏–º–µ–Ω–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è  nest_asyncio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        import subprocess
        import sys
        subprocess.check_call([sys.executable, "-m", "pip", "install", "nest-asyncio"])
        import nest_asyncio
        nest_asyncio.apply()
        print("‚úÖ nest_asyncio —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω")
    
    run_bot()
