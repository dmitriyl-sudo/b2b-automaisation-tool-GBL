#!/usr/bin/env python3
"""
Telegram –±–æ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º event loop –ø—Ä–æ–±–ª–µ–º—ã
"""

import asyncio
import logging
import nest_asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram_config import TelegramConfig
from export_logger import ExportLogger

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å event loop
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_message = """
ü§ñ <b>B2B Automation Tool Bot</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ Google Sheets.

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/projects - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üîî –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è—é –æ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ!
"""
    await update.message.reply_text(welcome_message, parse_mode='HTML')

async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /today - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        export_logger = ExportLogger()
        stats = export_logger.get_today_summary()
        
        if stats["total"] == 0:
            message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n‚ùå –°–µ–≥–æ–¥–Ω—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ –±—ã–ª–æ"
        else:
            message = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>

üìà –í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: <b>{stats["total"]}</b>
üè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: <b>{len(stats["projects"])}</b>

üìã <b>–¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤:</b>"""
            
            for export_type, count in stats["by_type"].items():
                message += f"\n   ‚Ä¢ {export_type}: {count}"
            
            message += "\n\nüåç <b>–û–∫—Ä—É–∂–µ–Ω–∏—è:</b>"
            for env, count in stats["by_env"].items():
                message += f"\n   ‚Ä¢ {env}: {count}"
            
            if stats["projects"]:
                message += "\n\nüè¢ <b>–ü—Ä–æ–µ–∫—Ç—ã:</b>"
                for project in stats["projects"][:5]:
                    count = sum(1 for exp in stats["exports"] if exp["project"] == project)
                    message += f"\n   ‚Ä¢ {project}: {count}"
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /today: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def projects_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /projects - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ Google Sheets"""
    try:
        export_logger = ExportLogger()
        stats = export_logger.get_today_summary()
        latest_sheets = export_logger.get_latest_sheets_by_project()
        
        if stats["total"] == 0:
            message = "üè¢ <b>–ü—Ä–æ–µ–∫—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n‚ùå –°–µ–≥–æ–¥–Ω—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ –±—ã–ª–æ"
        else:
            message = f"üè¢ <b>–ü—Ä–æ–µ–∫—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ Google Sheets</b>\n\n"
            
            for project in stats["projects"]:
                project_exports = [exp for exp in stats["exports"] if exp["project"] == project]
                count = len(project_exports)
                
                # –¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
                types = {}
                envs = {}
                
                for exp in project_exports:
                    exp_type = exp.get("export_type", "unknown")
                    env = exp.get("env", "unknown")
                    types[exp_type] = types.get(exp_type, 0) + 1
                    envs[env] = envs.get(env, 0) + 1
                
                message += f"üìÅ <b>{project}</b> ({count} —ç–∫—Å–ø–æ—Ä—Ç–æ–≤)\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π Google Sheets
                if project in latest_sheets:
                    sheet_info = latest_sheets[project]
                    sheet_url = sheet_info["sheet_url"]
                    geo = sheet_info.get("geo", "N/A")
                    env = sheet_info.get("env", "N/A")
                    export_type = sheet_info.get("export_type", "N/A")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if "spreadsheets/d/" in sheet_url:
                        sheet_id = sheet_url.split("spreadsheets/d/")[1].split("/")[0]
                        short_id = sheet_id[:8] + "..."
                    else:
                        short_id = "sheet"
                    
                    message += f"   üîó <a href='{sheet_url}'>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç ({short_id})</a>\n"
                    message += f"   üìä {geo} | {env} | {export_type}\n"
                else:
                    message += f"   ‚ùå –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ Google Sheets\n"
                
                if types:
                    type_str = ", ".join([f"{k}({v})" for k, v in types.items()])
                    message += f"   üìã –¢–∏–ø—ã: {type_str}\n"
                
                if envs:
                    env_str = ", ".join([f"{k}({v})" for k, v in envs.items()])
                    message += f"   üåç –û–∫—Ä—É–∂–µ–Ω–∏—è: {env_str}\n"
                
                message += "\n"
        
        await update.message.reply_text(message, parse_mode='HTML', disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /projects: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_message = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/projects - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Google Sheets.

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ (single/multi/full)
‚Ä¢ –û–∫—Ä—É–∂–µ–Ω–∏—è (prod/stage)

‚ú® –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ —ç–∫—Å–ø–æ—Ä—Ç—ã!
"""
    await update.message.reply_text(help_message, parse_mode='HTML')

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º event loop"""
    print("ü§ñ –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not TelegramConfig.is_configured():
        print("‚ùå Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    bot_token = TelegramConfig.get_bot_token()
    chat_id = TelegramConfig.get_chat_id()
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {bot_token[:10]}... -> {chat_id}")
    print("üìã –ö–æ–º–∞–Ω–¥—ã: /start, /today, /projects, /help")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("today", today_command))
        application.add_handler(CommandHandler("projects", projects_command))
        application.add_handler(CommandHandler("help", help_command))
        
        print("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º event loop
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = loop.create_task(application.run_polling())
            print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º event loop")
            return task
        else:
            # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            loop.run_until_complete(application.run_polling())
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º nest_asyncio –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è event loop
    try:
        import nest_asyncio
        nest_asyncio.apply()
        print("‚úÖ nest_asyncio –ø—Ä–∏–º–µ–Ω–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è  nest_asyncio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        import subprocess
        import sys
        subprocess.check_call([sys.executable, "-m", "pip", "install", "nest-asyncio"])
        import nest_asyncio
        nest_asyncio.apply()
        print("‚úÖ nest_asyncio —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω")
    
    run_bot()
