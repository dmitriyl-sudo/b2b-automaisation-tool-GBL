#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ Google Sheets —ç–∫—Å–ø–æ—Ä—Ç–∞—Ö
"""

import asyncio
import logging
import os
from datetime import datetime, date
from typing import Optional
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
try:
    from export_logger import get_today_exports_summary, export_logger
    EXPORT_LOGGER_AVAILABLE = True
except ImportError:
    EXPORT_LOGGER_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Export logger –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, bot_token: str, chat_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
            chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.bot = Bot(token=bot_token)
        
    async def send_sheet_notification(
        self, 
        sheet_url: str, 
        project: str, 
        geo: str = None, 
        env: str = "prod",
        export_type: str = "single"
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º Google Sheets —Ñ–∞–π–ª–µ
        
        Args:
            sheet_url: –°—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets —Ñ–∞–π–ª
            project: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            geo: GEO –∫–æ–¥ (–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞)
            env: –û–∫—Ä—É–∂–µ–Ω–∏–µ (prod/stage)
            export_type: –¢–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ (single/multi/full)
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            if export_type == "single":
                title = f"üìä {project} - {geo} ({env.upper()})"
                description = f"–°–æ–∑–¥–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è {geo} –≤ –ø—Ä–æ–µ–∫—Ç–µ {project}"
            elif export_type == "multi":
                title = f"üìä {project} - Multi-GEO ({env.upper()})"
                description = f"–°–æ–∑–¥–∞–Ω Multi-GEO —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}"
            elif export_type == "full":
                title = f"üìä {project} - Full Export ({env.upper()})"
                description = f"–°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ {project}"
            else:
                title = f"üìä {project} - Export ({env.upper()})"
                description = f"–°–æ–∑–¥–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"""üöÄ <b>–ù–æ–≤—ã–π Google Sheets —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω!</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ <b>–ü—Ä–æ–µ–∫—Ç:</b> {project}
‚Ä¢ <b>–¢–∏–ø:</b> {export_type.title()} Export
‚Ä¢ <b>–û–∫—Ä—É–∂–µ–Ω–∏–µ:</b> {env.upper()}
{f'‚Ä¢ <b>GEO:</b> {geo}' if geo else ''}
‚Ä¢ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href="{sheet_url}">–û—Ç–∫—Ä—ã—Ç—å Google Sheets</a>

‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
üîí –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=False
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç
            if EXPORT_LOGGER_AVAILABLE:
                try:
                    from export_logger import log_export
                    log_export(project, geo, env, export_type, sheet_url)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {title}")
            return True
            
        except TelegramError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –±–æ—Ç—É
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = f"""ü§ñ <b>Telegram Bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>
‚Ä¢ <b>–ò–º—è:</b> {bot_info.first_name}
‚Ä¢ <b>Username:</b> @{bot_info.username}
‚Ä¢ <b>ID:</b> {bot_info.id}
‚Ä¢ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ Google Sheets!"""

            await self.bot.send_message(
                chat_id=self.chat_id,
                text=test_message,
                parse_mode='HTML'
            )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
_telegram_notifier: Optional[TelegramNotifier] = None

def init_telegram_bot(bot_token: str, chat_id: str) -> TelegramNotifier:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–∞
    
    Args:
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        
    Returns:
        TelegramNotifier: –≠–∫–∑–µ–º–ø–ª—è—Ä —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
    """
    global _telegram_notifier
    _telegram_notifier = TelegramNotifier(bot_token, chat_id)
    return _telegram_notifier

def get_telegram_notifier() -> Optional[TelegramNotifier]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
    
    Returns:
        TelegramNotifier –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    """
    return _telegram_notifier

async def send_sheet_notification_async(
    sheet_url: str, 
    project: str, 
    geo: str = None, 
    env: str = "prod",
    export_type: str = "single"
) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    notifier = get_telegram_notifier()
    if not notifier:
        logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    
    return await notifier.send_sheet_notification(
        sheet_url=sheet_url,
        project=project,
        geo=geo,
        env=env,
        export_type=export_type
    )

def send_sheet_notification_sync(
    sheet_url: str, 
    project: str, 
    geo: str = None, 
    env: str = "prod",
    export_type: str = "single"
) -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return loop.run_until_complete(
            send_sheet_notification_async(
                sheet_url=sheet_url,
                project=project,
                geo=geo,
                env=env,
                export_type=export_type
            )
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_message = """
ü§ñ <b>B2B Automation Tool Bot</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ Google Sheets —ç–∫—Å–ø–æ—Ä—Ç–∞—Ö.

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ /projects - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞

üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö Google Sheets —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —ç–∫—Å–ø–æ—Ä—Ç–∞.

‚ú® –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
"""
    await update.message.reply_text(welcome_message, parse_mode='HTML')

async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /today - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    if not EXPORT_LOGGER_AVAILABLE:
        await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        summary = get_today_exports_summary()
        
        if summary["total"] == 0:
            message = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>
üìÖ {date.today().strftime('%d.%m.%Y')}

üîç –≠–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
"""
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            projects_list = "\n".join([f"   ‚Ä¢ {project}" for project in summary["projects"]])
            
            types_list = "\n".join([
                f"   ‚Ä¢ {export_type}: {count}" 
                for export_type, count in summary["by_type"].items()
            ])
            
            envs_list = "\n".join([
                f"   ‚Ä¢ {env}: {count}" 
                for env, count in summary["by_env"].items()
            ])
            
            message = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>
üìÖ {date.today().strftime('%d.%m.%Y')}

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
   ‚Ä¢ –í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: {summary["total"]}
   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(summary["projects"])}

üè¢ <b>–ü—Ä–æ–µ–∫—Ç—ã ({len(summary["projects"])}):</b>
{projects_list}

üìã <b>–ü–æ —Ç–∏–ø–∞–º:</b>
{types_list}

üåç <b>–ü–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º:</b>
{envs_list}
"""
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /today: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def projects_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /projects - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å –¥–µ—Ç–∞–ª—è–º–∏"""
    if not EXPORT_LOGGER_AVAILABLE:
        await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        summary = get_today_exports_summary()
        
        if summary["total"] == 0:
            message = f"""
üè¢ <b>–ü—Ä–æ–µ–∫—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>
üìÖ {date.today().strftime('%d.%m.%Y')}

üîç –≠–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
"""
        else:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
            projects_data = {}
            for export in summary["exports"]:
                project = export["project"]
                if project not in projects_data:
                    projects_data[project] = []
                projects_data[project].append(export)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            projects_details = []
            for project, exports in sorted(projects_data.items()):
                export_count = len(exports)
                latest_export = max(exports, key=lambda x: x["timestamp"])
                latest_time = datetime.fromisoformat(latest_export["timestamp"]).strftime('%H:%M')
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
                types = {}
                for export in exports:
                    export_type = export.get("export_type", "unknown")
                    types[export_type] = types.get(export_type, 0) + 1
                
                types_str = ", ".join([f"{t}({c})" for t, c in types.items()])
                
                projects_details.append(
                    f"   ‚Ä¢ <b>{project}</b> - {export_count} —ç–∫—Å–ø–æ—Ä—Ç(–æ–≤)\n"
                    f"     –¢–∏–ø—ã: {types_str}\n"
                    f"     –ü–æ—Å–ª–µ–¥–Ω–∏–π: {latest_time}"
                )
            
            projects_list = "\n\n".join(projects_details)
            
            message = f"""
üè¢ <b>–ü—Ä–æ–µ–∫—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>
üìÖ {date.today().strftime('%d.%m.%Y')}

üìä <b>–í—Å–µ–≥–æ: {len(projects_data)} –ø—Ä–æ–µ–∫—Ç–æ–≤, {summary["total"]} —ç–∫—Å–ø–æ—Ä—Ç–æ–≤</b>

{projects_list}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /today –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /projects: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_message = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ /today - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ /projects - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Google Sheets —Ñ–∞–π–ª–æ–≤:
‚Ä¢ Single GEO Export - —ç–∫—Å–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ GEO
‚Ä¢ Multi-GEO Export - —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö GEO
‚Ä¢ Full Project Export - –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
–ë–æ—Ç –≤–µ–¥–µ—Ç —É—á–µ—Ç –≤—Å–µ—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∏ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å:
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –¢–∏–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ (single/multi/full)
‚Ä¢ –û–∫—Ä—É–∂–µ–Ω–∏—è (prod/stage)

üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7
‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è

‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>
–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    await update.message.reply_text(help_message, parse_mode='HTML')

def setup_bot_commands(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("today", today_command))
    application.add_handler(CommandHandler("projects", projects_command))
    application.add_handler(CommandHandler("help", help_command))

async def run_bot_with_commands(bot_token: str, chat_id: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        setup_bot_commands(application)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏...")
        await application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if not bot_token or not chat_id:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export TELEGRAM_BOT_TOKEN='your_bot_token'")
        print("   export TELEGRAM_CHAT_ID='your_chat_id'")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    notifier = init_telegram_bot(bot_token, chat_id)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if await notifier.test_connection():
        print("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await notifier.send_sheet_notification(
            sheet_url="https://docs.google.com/spreadsheets/d/test123",
            project="Rolling",
            geo="DE",
            env="prod",
            export_type="single"
        )
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram –±–æ—Ç—É")

if __name__ == "__main__":
    asyncio.run(main())
